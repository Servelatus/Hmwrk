# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества
# ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cellula:
    def __init__(self, name, cell):
        self.name = name
        self.cell = cell

    def __add__(self, other):
        return Cellula(self.name + other.name, self.cell + other.cell)

    def __sub__(self, other):
        if self.cell - other.cell < 0:
            print(f"Клетка {self.name} меньше {other.name}")
        else:
            self.cell = self.cell - other.cell
            print(self.name, self.cell)


    def __mul__(self, other):
        return Cellula('Супер' + self.name + other.name, self.cell * other.cell)

    def __truediv__(self, other):
        self.name = self.cell // other.cell
        print(self.name, self.cell)


    def __str__(self):
        print(self.name, ' ', self.cell, ' cells')
        return ''

    def make_order(self, n):
        s=''
        for i in range(1, self.cell + 1):
            if i % n:
                s += '*'
            else:
                s += '*\n'
        return s

ameba = Cellula('амёба', 2)
lamblia = Cellula('лямблия', 10)
kandida = Cellula('кандида', 3)
stafilokok = Cellula('стафилокок', 7)
botulina= Cellula('ботулина', 11)
cholerae =Cellula('холера', 15)

print(lamblia.make_order(2))

print(ameba)
print(lamblia)
print(ameba + lamblia)
print(kandida - stafilokok)
print(lamblia - stafilokok)
print(botulina/kandida)

super_cell = lamblia * cholerae
print(super_cell.make_order(10))



